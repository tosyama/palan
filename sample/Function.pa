alias int=int32;

auto x,y = pointadd(1,2,3,4);
print(x.str ":" y.str);
swap(x,y) -> x, y;
print(x.str ":" y.str);

// コールチェイン(仮) 戻り値(expresion)と引数の前半の方が一致すれば
// 関数を->でつなげれらる。

string str1, str2 = "1\t2\t3", "3,4,5";
string[] tmp = split(str1, "\t");
join(tmp1, ",") -> str1;
// こうかける↓
str1 -> split("\t") -> join(",") -> str1;

object o1, o3, o4;

funco(o1,o2.clone, o3>>, *o2, io o4) ->> o1; // 所有を渡したので、o3は無効.
					// 内部処理的にはo1の無効処理(null代入)は行わない。
					// <<, *, ioは飾り。宣言をを意識させる+関数宣言後置の場合の推測に使用
					// 式を書く場合は、&(ab+b), *(x+3)
					// 式により発生したテンポラリオブジェクトは
					// *の場合のみ関数実行後delete.
					// *の引数はreturnできない(clone必要->無印を使うこと)。

o1 -> o2; // deep copy.
o1 ->> o2; // 所有権を取られたので、o1は無効(null代入). 以降o1->o2はコンパイルエラー

// o1.xx(); o3.xx(); // ここではこれはコンパイルエラーとなる

auto *o4 = *o2	// 参照のみ。o4がスコープはずれてもdeteteされない。

func2(x, y) -> x;

// Policy: returnはrval, output用
//	parameterは input / io用
//	parameterのプリミティブ型(int等)は、基本コピー渡し、ioの場合は、参照渡しとなる。
//	parameterのオブジェクト型(string等)は参照渡しのみ。

// multi return
func pointadd(int sx, int sy int ax, int ay)
	-> int x, int y
{
	x = sx + ax;
	y = sy + ay;
	return;
}

// simple swap
func swap(int sx, sy)
	-> int x, y
{
	return sy, sx;
}

// object
func funco(object o1, >>o2, >>o3, *o4, io o5)
	-> object o2
{
	// o1 は rval input only.(clone would be created before func call and callee free it)
	// o2はrvalだか 戻り値なので通常deleteされない. 
	// o3はrval. deleteされる. read/write lval.clone or &lval ならok.
	// o4はlval. deleteされない。 readonly。　clone直など名無しオブジェクトは渡せない
	// (名無しオブジェクトのスコープ次第。Statement終わりまでなら渡せるはず)
	// o5はlval. deleteされない。writable(非推奨)
	// *渡しの時は別スレッドなどで途中で破棄されないよう、caller側でコンパイラが警告する。
	// プリミティブ(int64等)には &*は使えない。

	return ;	// returnはo2がrval
}

// 戻り値とパラメータは重複して同じ名前を使うことができる。
// 入出力の意図の記述とレジスタの共有ができる。
func func2(int a, int b) -> int a
{
	a += b;
}

