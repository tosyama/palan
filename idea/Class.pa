export class foo {
data:
		int16 sec1;	// private
		io int a;
		out string s;
		byte sec2;	// private
		int x; 

method:
	/// foo constractor
	pub construct(
		int aa=0	/// aa value
	)
	{
		return null; // if error
	}

	pub inline int result caloc() {
		return result = a*x;
	}

	void test()	// private method
	{
	}
}

interface baa {
	data:
		foo:impl d;
		foo:impl arr[5];
		foo ref;
		foo ref_arr[5];
	method:
}

class string {
	data:
		byte cstr[]; // Unknown instance size.
	property:
		int len;
	method:
		construct(string src, uint buf_size=0);
		inline byte operator[](uint n) {
			return cstr[n];
		}
		char operator()(uint n);
}

implement string {
	string construct(string src, uint buf_size)
	: cstr[buf_size?buf_size:src.size]
	{
		strcpy(src.cstr,this.cstr);
	}
	int len {
		return utl8_len(cstr);
	}
}

