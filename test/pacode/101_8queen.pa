ccall int32 printf(...);

const X,Y = 8,8;
int32 count;
byte[Y,X] board;

board ->> initBoard()
	->> queen(-1, -1)
	->> board, count;

printf("answer: %d\n", count);

func initBoard(byte[Y,X] >>board)
	-> byte[Y,X] board
{
	y = 0;
	while y < Y {
		x = 0;
		while x < X {
			0->board[y, x];
			x+1->x;
		}
		y+1->y;
	}
}

func queen(byte[Y,X] >>board, int32 x, y)
	-> byte[Y,X] board, int32 count
{
	0 -> count;

	{
		xx = x-1;
		while xx >= 0 {
			if board[y, xx] { return }
			xx-1 -> xx;
		}
	}

	{
		xx = x-1;
		yy = y-1;
		while xx >= 0 && yy >= 0 {
			if board[yy, xx] { return }
			xx-1, yy-1 -> xx, yy;
		}
	}

	{
		xx = x-1;
		yy = y+1;
		while xx >= 0 && yy < 8 {
			if board[yy, xx] { return }
			xx-1, yy+1 -> xx, yy;
		}
	}

	if x >= 0 { 1 -> board[y, x] }

	if x == X-1 {
		count+1 -> count;
	} else {
		yy = 0;
		while yy < Y {
			int32 cnt;
			board ->> queen(x+1, yy)
				->> board,  cnt;
			cnt + count -> count;
			yy+1 -> yy;
		}
	}

	if x >= 0 { 0 -> board[y, x] }
}
