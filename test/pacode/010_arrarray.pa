ccall printf(...);
ccall setenv(...);
ccall mtrace();
ccall muntrace();
ccall exit(int32 x);

func set_arrarr([3][4]int32 >>a) -> [3][4]int32 a
{
	int32 i, j;

	0 -> i;
	while i<3 {
		0 -> j;
		while j<4 {
			i*4+j -> a[i][j];
			j+1 -> j;
		}
		i+1 -> i;
	}
}

func inc_arrarr([3][4]int32 a) -> [3][4]int32 b
{
	int32 i, j;

	0 -> i;
	while i<3 {
		0 -> j;
		while j<4 {
			a[i][j]+1 -> b[i][j];
			j+1 -> j;
		}
		i+1 -> i;
	}
}

func set_arrarr2([4][2,3][5]int32 >>a) -> [4][2,3][5]int32 a
{
	int32 i, j, k, l;

	0 -> i;
	while i<4 {
		0 -> j;
		while j<2 {
			0 -> k;
			while k<3 {
				0 -> l;
				while l<5 {
					i*1000+j*100+k*10+l -> a[i][j,k][l];
					l+1 -> l;
				}
				k+1 -> k;
			}
			j+1 -> j;
		}
		i+1 -> i;
	}
}

[9]int32 o;

setenv("MALLOC_TRACE", "out/mtrace010", 1);
mtrace();
{
	[3][4]int32 a1;

	set_arrarr(a1>>) ->> a1;

	[3][4]int32 a2 = inc_arrarr(a1);
	[3][4]int32 a3 <<= inc_arrarr(a2);

	a1[2][3] -> o[0];
	a2[2][3] -> o[1];
	a3[2][3] -> o[2];

	[4][2,3][5]int32 b1, b2;
	[2,3][5]int32 c;
	[5]int32 d;

	set_arrarr2(b1>>) ->> b1;
	b1[3][1,2][4] -> o[3];
	b1[0][1,2][3] + b1[2][0,1][2] -> o[4];

	b1[1] -> c;
	c[1,1][0] -> o[5];

	{
		int32 i=0;
		while i<5 { i->d[i]; i+1->i; }
	}

	d -> c[d[0],d[1]];
	c -> b1[d[1]];
	b1 -> b2;
	b2[1][d[0],1][2] -> o[6];

	b1[0] -> b2[1];
	b2[1][0,1][2] -> o[7];

	d ->> c[1,2];
	c ->> b1[2];
	b1 ->> b2;
	b2[2][1,2][3] -> o[8];
}

muntrace();

printf("%d %d %d %d %d %d %d %d %d",
		o[0], o[1], o[2], o[3], o[4], o[5], o[6], o[7], o[8]);

