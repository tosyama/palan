ccall int32 printf();

i1 = 11;
i2 = 12;
int64[3] a = [i1,2,3];
printf("%d%d", a[0], a[2]);

int32[2,3] b, c =
	[i1,2,3]
	[44,55,66],
 	[11,22,33]
	[4,5,i2];

printf(" %d%d %d%d", b[0,0], b[1,2], c[0,0], c[1,2]);

const FARR = [11.1,22.2];
flo32[3,2] f = [[1.1, 1.2], FARR, [33, i1+i2]];
printf(" %.1f %.1f %.1f\n", f[0,0], f[1,1], f[2,1]);

// type inference
aa = [i1,2,3];
printf("%d%d", aa[0], aa[2]);

int32[,] bb, cc =
	[i1,2,3]
	[44,55,66],
 	[11,22,33]
	[4,5,i2];
printf(" %d%d %d%d", bb[0,0], bb[1,2], cc[0,0], cc[1,2]);

ff = [[1.1, 1.2], FARR, [33, i1+i2]];
printf(" %.1f %.1f %.1f", ff[0,0], ff[1,1], ff[2,1]);

u = 11u;
uu = [u, 12u, 13u];
printf(" %d\n", uu[2]);

// assignment
[3+i1, i2, 23] -> a;
printf("%d%d ", a[0], a[2]);

[i1+5, add(i1,i2), i1]
[4,5,6]	-> b;
printf("%d%d%d ", b[0,0], b[0,1], b[0,2]);

byte[2,2,2] d;
[[i1,12][21,22],[31,32][41,42]] -> d;
printf("%d%d%d\n", d[0,0,0], d[1,0,0], d[1,1,1]);

func add(int64 a, b) -> int64 a
{
	a + b -> a;
}

// type compatible(overload)
prnt([i1, i1+1, i1+2]);
prnt([u, u+1u, u+2u]);
prnt([i1+0.1,22.2]);


prnt([u, u+1, i1+0.1]);
prnt([u, u+0.2]);

printf("\n");   

int64[2] a1, a2;
int64[3] b1, b2;
[i1,i1+1], [i2+1,3,4] -> a1, b1 -> a2, b2;

printf("%d %d %d %d", a1[0], a2[1], b1[0], b2[2]);

func prnt(int64[3] a)
{
	printf("%d %d,", a[0],a[2]);
}

func prnt(flo64[2] f)
{
	printf("%.1f,", f[1]);
}
