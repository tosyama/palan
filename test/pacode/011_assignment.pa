ccall int32 printf();
ccall exit();
ccall setenv();
ccall mtrace();
ccall muntrace();


// Primitive assignment.
int32 p1, p2, p3, p4, p5;
1, 2u -> p1, p2;
p1, p2 -> p3, p4;

int32[2] p6;

printf("%d %d %d %d %d %d %d %d\n",
	p1, p2, p3, p4, (5->p5), p5, (p5+1->p6[1]), p6[1]);


// Work value assignment.
p1+p2, p2+2 -> p2, p3;	// Note: Currently, p3 of p3+3 is 
						// used after updated value. But spec would be change in future.
printf("%d %d", p2, p3);

p3 / 2, p3 % 2 -> p1, p4;
printf(" %d %d\n", p1, p4);

func intfunc(int16 a, b) -> int16 c, d
{ a+b -> c; a-b -> d; }

intfunc(p1, p2) -> p3, p4;

printf("%d %d\n", p3, p4);

// Object copy(single layer)
int16[3] a1, a2, a3, a4;
9 -> a1[2];
// object copy
a1 -> a2;
a1[2] -> p1;
a1[2] -> a2[3];

// Object move
a1 ->> a3;

printf("%d %d %d %d\n", a3[2], a2[2], a2[3], a1);

// object copy 
int32[3][2][5] arr, arr2;
int32 z=0;

3->arr[1][0][2];
9->arr2[3][0][1];

arr[z+1], arr2[3] -> arr2[2+z], arr[0];

printf("%d %d\n",arr2[2][0][2], arr[0][0][1]);

// chain assign
3, 5, p1+1 -> p2, p3, p6[0] -> p6[1], p4, p5;

printf("%d %d %d %d %d %d\n",
		p2, p3, p6[0], p6[1], p4, p5);

{
	byte[3] aa, bb, ee, ff;
	byte[3][2] cc, dd;


	3->aa[1];
	9->bb[2];

	aa, bb -> cc[0], dd[1] -> ee, ff;

	printf("%d %d", ee[1], ff[2]);

	setenv("MALLOC_TRACE", "out/mtrace011-1", 1);
	mtrace();
	8->aa[0];
	4->bb[1];

	aa, bb -> cc[0], dd[1]
		->>ee, >>ff;

	muntrace();

	printf(" %d %d", ee[0], ff[1]);

	setenv("MALLOC_TRACE", "out/mtrace011-2", 1);
	mtrace();

	retbytes()-> aa, bb
			->> cc[0], >>dd[1]
			-> cc[1], dd[0]
			-> ee, ff;
	muntrace();

	printf(" %d %d", ee[1], ff[2]);

	setenv("MALLOC_TRACE", "out/mtrace011-3", 1);
	mtrace();
	6, 1 -> cc[0][1], dd[1][2];

	cc[0], dd[1] ->> aa, >>bb
		-> ee, ff;
	muntrace();
	printf(" %d %d\n", ee[1], ff[2]);

	setenv("MALLOC_TRACE", "out/mtrace011-4", 1);
	mtrace();
}
muntrace();

exit(0);	// to flush buffer.

func retbytes() -> byte[3] aa, bb , cc
{
	2->aa[1];
	7->bb[2];
	99->cc[0];
}
