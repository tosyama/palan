ccall printf(...);

i = 2;
[2][2,3]int16 arr = [[1,2,3][4,5,6],[21,20+i,23][24,25,26]];
printf("%d %d %d\n", arr[0][0,0], arr[1][0,1], arr[1][1,2]);

[[i, (1->i),1][4,5,6],[i+20,2,1][4,5,6]]
 -> test();

[][,]int16 arr2 = [[1,2,3][4,5,6],[7,8,9][10,11,12]];
printf("%d %d %d\n", arr2[0][0,0], arr2[1][0,1], arr2[1][1,2]);

test([[1,2,3][4,5,6],[7,8,9][10,11,12]]);

2->i;
[][][]int32 arr3 = [[i, (1->i),1][4,5,6],[i+20,i+10,1][4,5,6]];
printf("%d %d %d\n", arr3[0][0][0], arr3[0][0][1], arr3[1][0][0]);

[2][10]byte strs = ["abc", "ABC"];
90 -> strs[1][1]; // 'Z'
printf("%s %s\n", strs[0], strs[1]);

func test([2][2,3]int16 arr)
{
	printf("%d %d %d\n",arr[0][0,0], arr[0][0,1], arr[1][0,0]);
}

[]int64 arr4 = [4607632778762754457, 4607632778762754458];
int32 x = 1;
if x < 1.1 { // comp int & flo generate RO value with shared arr4.
	printf("x ");
}

[]int32 arr5 = [100, 101, 102, 103, 104];
[]int32 arr6 = [102, 103]; // shared ro area case
printf("%d %d", arr5[4], arr6[1]);

