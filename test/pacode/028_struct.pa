ccall printf(...);
ccall setenv(...);
ccall mtrace();
ccall muntrace();

type Test {
	int32 i32;
	byte b;
	int64 i64;
	flo32 f32;
	flo64 f64;
};

type Test2 {
	int32 ti32;
	flo64 f64;
	Test test;
	[5]int16 arr16;
};

int32 i, i2, i3, i4;
int32 j, j2, j3, j4, j5;
flo64 f, f2;
int64 k, k2, k3;
flo32 f3;
flo64 f4;

setenv("MALLOC_TRACE", "out/mtrace028", 1);
Test t2;
mtrace();
{
	// simple struct
	Test t;
	initTest(t>>)->>t;
	t.i32 -> i;
	t.b -> i2;
	t.i64 -> i3;
	t.f32 -> f;

	(t.i32 + t.b) * t.i64 -> i4;
	
	copyParam(t);
	refParam(t);
	t -> t2;

	// struct that have object member
	Test2 tt, tt2, tt3;

	i -> tt.test.i32;
	i2 -> tt.test.b;
	i3 -> tt.test.i64;
	5.55 -> tt.test.f32;

	tt -> tt2;

	@Test2 reftt2 = tt2;
	tt2.test.i32 -> j;
	reftt2.test.b -> j2;
	tt2.test.i64 -> j3;

	tt2.test ->> t;
	t.f32 -> f2;

	[5]int16 ar = [1,2,3,4,5];
	ar ->> tt2.arr16;
	tt2.arr16[4] -> j4;

	tt2.arr16 -> tt3.arr16;
	tt3.arr16[0] -> j5;

	// struct array
	[5]Test tarr;
	10 -> tarr[0].f32;
	tarr[0].f32 -> k;
	
	// complex struct array
	x = 99;
	const TEST2_VAL = [11, 1.23, [21,22,23,24.4,12.3], [31,32,33,34,35] ];
	const TEST2_VALx2 = [TEST2_VAL, TEST2_VAL];
	[2][3,2]Test2 cmplxarr =
		[[TEST2_VALx2, TEST2_VALx2, TEST2_VALx2]]
		[
			[
				TEST2_VALx2,TEST2_VALx2,
				[ TEST2_VAL, [11, 1.23, [21,22,23,24.4,3.44], [31,32,33,34,x]] ]
			]
		];

	cmplxarr[0][1,1].test.i32 -> k2;
	cmplxarr[0][1,1].test.f32 -> f3;
	cmplxarr[1][2,1].arr16[4] -> k3;
	cmplxarr[1][2,1].test.f64 -> f4;

	// ArrayValue for Test
	copyParam([1,2,3,3.3,4.4]);
	// ArrayValue for Test2
	copyParam([1, 2.22, [1,2,3,4,2.2],[1,2,3,4,5]]);
}

muntrace();
printf("%d %d %d %.2f\n", t2.i32, t2.b, t2.i64, t2.f32);
printf("%d %d %d %.2f %d\n", i, i2, i3, f, i4);
printf("%d %d %d %.2f %d %d\n", j, j2, j3, f2, j4, j5);
printf("%d %d %d %.2f %.2f", k, k2, k3, f3, f4);

func initTest(Test >>t) -> Test t
{
	32 -> t.i32;
	1 -> t.b;
	64 -> t.i64;
	1.23 -> t.f32;
}

func copyParam(Test t)
{
	99 -> t.i32;
	99 -> t.b;
	99 -> t.i64;
	99.9 -> t.f32;
}

// Dummy
func copyParam(Test2 t)
{
}

type Test3 {
	[2]int32 a;
	int32 b;
	int32 c;
	int32 d;
};

func copyParam(Test3 t)
{
}

func refParam(@Test t)
{
	if t.i32 != 32 {
		printf("ng");
	}
}

