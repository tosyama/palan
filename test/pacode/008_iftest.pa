ccall int32 printf();
ccall exit();

func elif(int32 i)
{
	if i == 0 {
		printf("[if]");
	} else if i == 1 {
		printf("[elif]");
	} else if 2 >= i {
		printf("[elif2]");
	} else {
		printf("[else]");
	}
}


elif(0);
elif(1);
elif(2);
elif(3);

if 1 { printf("[true]"); }
if 0 { printf("[false]"); }

printf("\n");

int32 i = 0;
while i < 3 {
	printf("%d", i);

	if i == 1 { printf("=="); }
	if i != 1 { printf("!="); }
	if i < 1 { printf("<"); }
	if i > 1 { printf(">"); }
	if i <= 1 { printf("<="); }
	if i >= 1 { printf(">="); }

	i+1 -> i;
}

printf("\n");
byte b = 255;

if b > 1 { printf("[us]"); }
if b > 1u { printf("[uu]"); }

if b <= 1 { printf("[us]"); }
if b <= 1u { printf("[uu]"); }

if b+1 > b-1 { printf(">"); }

1->i;

if i<=2==1 { printf("t"); }
else { printf("f"); }
if 1>=2<1 { printf("t"); }
else { printf("f"); }
printf("%d%d%d\n",i<1,i<2,b<=1u);

func bool_t() -> int32
{
	printf("t");
	return 100;
}

func bool_f() -> int32
{
	printf("f");
	return 0;
}

// and test
if 1 && 0 { printf("a"); }
if 0 && 1 { printf("a"); }
if 1 && 1 { printf("a"); }
if b && 0 { printf("b"); }
if 0 && i { printf("b"); }
if b && i { printf("b"); }
0->b;
0->i;
if b && 1 { printf("c"); }
if 1 && i { printf("c"); }
if b && i { printf("c"); }
if bool_t() && bool_t() { printf("d"); }
if bool_t() && bool_f() { printf("d"); } else { printf("D"); }
if bool_f() && bool_t() { printf("d"); } else { printf("D"); }
if bool_t() && bool_t() && bool_t(){ printf("d"); }

exit(0);
