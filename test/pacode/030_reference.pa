ccall printf(...);
ccall setenv(...);
ccall mtrace();
ccall muntrace();

setenv("MALLOC_TRACE", "out/mtrace030-1", 1);
int32 i1,i2,i3,i4,i5,i6;
mtrace();
{
	@[3]int32 arr1 = [1,2,3];
	arr1[1] -> i1;

	[2]@[3]int32 arr2 = [1,2,3][4,5,6];
	arr2[1][1] -> i2;

	[3]int32 arr3 = arr1;
	arr3[2] -> i3;

	[2][3]int32 aaa = arr2;

	[1][2]@[3]int32 x1 = [[1,2,3][4,5,6]];
	[1][2][3]int32 x2 = x1;
	x2[0][1][1] -> i4;
	9 -> x2[0][0][1];	// check writable.

	@[3]int32 xx = x2[0][0];
	xx[1] -> i5;
	refread(x1[0][1], 1) -> i6
}
muntrace();

printf("%d %d %d %d %d %d\n", i1, i2, i3, i4, i5, i6);

type A {
	int16 i;
	@[3]int32 arr;
};

setenv("MALLOC_TRACE", "out/mtrace030-2", 1);
mtrace();
{
	A a = [3, [1,2,3]];
	@A b = a;
	@[3]int32 aarr = b.arr;
	aarr[1] -> i1;
}
muntrace();

printf("%d", i1);

func refread(@[3]int32 arr, int32 x) -> int32 i
{
	arr[x] -> i;
}
