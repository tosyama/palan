ccall int32 printf();
ccall exit();
ccall setenv();
ccall mtrace();
ccall muntrace();

func int16[3] pb arr_func(int32 x, int32[10] pa)
{
	int32[5] a1;
	{
		int16[5] a2;
		int16[3] a3;
		return a3;
	}
	byte[10] a4;
	return;
}

func int16[3] pb arr_func2(int32 x, int32[10] >> pa)
{
	int32[5] a1;
	10 -> pa[9];
}

func int32 x, y int32_func(int32 i, j)
{
	i+1,j -> x, y;
}

func int32 int32_func2(int32 i, j)
{
	return i+j;
}

int16[3] o, o2;
setenv("MALLOC_TRACE", "out/mtrace006", 1);
mtrace();
{
// alloc only
int32[10] a;
int16[3] b, c;

// d: copy of a, e: use return as is.
int32[10] d = a;
int16[3] e = arr_func(1, a);
int16[3] f <<= e;

arr_func(3, a) -> b;
arr_func2(4, a>>) ->> b;

int16 ind = 1;

5 -> b[ind-1];	// b[0]=5
2 -> b[ind];	// b[1]=2

int32_func(b[1],b[0]-1) -> b[0], b[2];	// b[0]=3,  b[2]=4

int16 s = b[0] + 1;	// s=4

b ->> c;	// b=undefined, c[0]=3,c[1]=2,c[2]=4
c -> o;
s -> o[2];
int32_func2(c[0],c[1]) -> o2[0];	// o2[0] = 5

s + o2[s * 0] -> o2[c[0]-2];	// o2[1] = 9
}
muntrace();

printf("%d %d %d %d %d\n", o[0], o[1], o[2], o2[0], o2[1]);
exit(0);

