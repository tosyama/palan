ccall printf(@[?]byte format, ...) -> int32;
ccall setenv(...);
ccall mtrace();
ccall muntrace();

setenv("MALLOC_TRACE", "out/mtrace035", 1);
 
type A {
	int64 a;
	int64 b;
};

type B {
	int64 a;
	int64 b;
	A o;
};

{
	// init test
	$A a_stk = [1,2];
 	A a_heap = [3,4];
 	$A a2_stk = a_heap;
	$A a3_stk;

	// member access
	a_stk.b + a2_stk.b -> a3_stk.a;

	f1(a_stk);
	f1(a2_stk);
	f1(a3_stk);
	
	// assignment
	a_stk -> a3_stk;
	f1(a3_stk);
	a_stk -> a_heap;
	f1(a_heap);

	[5,6] -> a_stk;
	f1(a_stk);
	f2(a2_stk) -> a_stk;
	printf(" %d", a_stk.b);
}

int64 x = 99;
mtrace();
{
	$A a = [1,2];
	$B b;

	a->b.o;
	b.o.b -> x;
}
muntrace();
printf(" %d", x);

// 	test->test2;
// 	test2->testx;
// 	testx->test2;
	
//	$B b;	// NG

//	4->zz[2];

//	int64 x = 1;
//	3->test.b;
//	f2(xx);

// need other tests..
//	test!->f3();
//	testx.f3().f3();


func f1(@A a)
{
	printf("%d", a.a);
}

func f2(@A a) -> A b
{
	a.a * 4 -> b.a;
	a.b * 4 -> b.b;
}
