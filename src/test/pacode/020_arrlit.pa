ccall printf(...);

const N = 4;

// int
[3]int64 i1 = [1,2,3];
[3]int32 i21, i22 = [1,2,3], [-4,5,6];
[3]int16 i3 = [1u,2,3];
[3]sbyte i4 = [1,2,N-1];

printf("%d%d%d%d%d ", i1[1], i21[2], i22[0], i3[0], i4[2]);

[4,5,6] -> i1;
[4,5,6],[7,8,9] -> i21, i22;
[4,5,6] -> i3;
[4,5,6] -> i4;

printf("%d%d%d%d%d ", i1[1], i21[2], i22[0], i3[0], i4[2]);

// float
[3]flo64 f1 = [1.1,2.2,3.3];
[3]flo32 f21, f22 = [1,2u,3], [4,5.5,6];

printf("%.1f %.1f %.1f\n", f1[2], f21[0], f22[1]);

// 2 dimention
[2,3]int32 ia1 = [1,2,3][4,5,6];
[2,3]int16 ia2, ia3 = [1,2,3][4,5,6], [7,8,9][10,11,12];

printf("%d%d%d ", ia1[1,1], ia2[1,2], ia3[0,0]);

[2,3]flo64 fa1 = [1, 2.1e+2, 3][4, 5, 6];
printf("%.0f ", fa1[0,1]);

[2,3]flo32 fa2 = [[1,2,3], [4,5,6]];
printf("%.0f%.0f ", fa2[1,0], fa2[1,2]);

// 3 dimention
[2,3,4]int64 iarr3 =
	[ [1,2,3,4][5,6,7,8][9,10,11,12] ]
	[ [-1,-2,-3,-4][-5,-6,-7,-8][-9,-10,-11,-12] ];
printf("%d%d%d ", iarr3[0,2,3], iarr3[1,1,1], iarr3[1,2,3]);

[2,3,4]int64 iarr3a =
	[[1,2,3,4][5,6,7,8][9,10,11,12],
	[-1,-2,-3,-4][-5,-6,-7,-8][-9,-10,-11,-12]];
printf("%d%d%d ", iarr3a[0,2,3], iarr3a[1,1,1], iarr3a[1,2,3]);

[2,3,4]int64 iarr3b = [
		[[1,2,3,4], [5,6,7,8], [9,10,11,12]],
		[[-1,-2,-3,-4],[-5,-6,-7,-8],[-9,-10,-11,-12]]
	];
printf("%d%d%d\n", iarr3b[0,2,3], iarr3b[1,1,1], iarr3b[1,2,3]);

// 4 dimention
[2,2,2,2]int64 iarr4 = [[[1,2][3,4]] [[5,6][7,8]]] [[[9,10][11,12]] [[13,14][15,16]]];
printf("%d%d ", iarr4[0,0,0,0], iarr4[1,1,1,1]);

[ [[16,15][14,13]][[12,11][10,9]], [[8,7][6,5]][[4,3][2,1]]] -> iarr4;
printf("%d%d ", iarr4[0,0,0,0], iarr4[1,1,1,1]);

// 1x
[1,3]int16 arr1 = [[1,2,3]];
[3,1]int16 arr1a = [1][2][3];
[3,1]int16 arr1b = [[1],[2],[3]];
[1,3,1]int16 arr1c = [[1][2][3]];

printf("%d%d", arr1[0,0], arr1[0,2]);
printf("%d%d", arr1a[0,0], arr1a[2,0]);
printf("%d%d", arr1b[0,0], arr1b[2,0]);
printf("%d%d", arr1c[0,0,0], arr1c[0,2,0]);

// text literal
test("abc");

func test([10]byte text)
{
	68 -> text[1];// 68 (D)
	printf(" %s", text);
}

